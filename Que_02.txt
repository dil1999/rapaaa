fruit(apple).
fruit(mango).
fruit(banana).
fruit(orange).


















































cal_bmi:-
     write("Enter Your weight :"),
     read(Weight),
     write("Enter your height :"),
     read(Height),
     BMI is Weight/(Height*Height),
     format("Your Bmi is : ~w",[BMI]).


---------------------------------------------------------

operation(A,B,'+',Result) :- Result is A+B.
operation(A,B,'-',Result) :- Result is A-B.
operation(A,B,'*',Result) :- Result is A*B.
operation(A,B,'/',Result) :- Result is A/B.

cal :-
   write("Enter 1st value :"),
   read(A),
   write("Enter 2nd value :"),
   read(B),
   write("Enter the operator:"),
   read(Operator),
   operation(A,B,Operator,Result),
   format("Your Output Is ~w",[Result]).
---------------------------------------------------------

avg(N1,N2,N3,Avg):- Avg is (N1+N2+N3/3).

cal_avg:-
    write("Enter 1st number :"),
    read(N1),
    write("Enter 2nd Number :-"),
    read(N2),
    write("Enter 3rd Number :-"),
    read(N3),
    avg(N1,N2,N3,Avg),
    (Avg >= 50 -> format("Pass") ; format("fail") ).


---------------------------------------------------------------

province(X,Y) :- distric(X,Y).


------------------------------------------------------------------


student(name(['saman','perera']),11021).


marks(11011,score([50,71,57,65,61])).

check_janaka:-
    student(name(['janaka','silva']),_).


registeredstd(X,Y,Z):-student(name([X,Y]),Z).


userinputchk(Fname,Lname):-student(name([Fname,Lname]),_) ->
                         write('Registered');
                         write('Not Registered').

--------------------------------------


father(X,Y):-male(X),parent(X,Y).
mother(X,Y):-female(X),parent(X,Y).

daughter(X,Y):-female(X),parent(Y,X).


ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z),ancestor(Z,Y).

grandparent(X, Z) :- parent(X, Y), parent(Y, Z).

cousin(X, Y) :- parent(Z, X), parent(W, Y), sibling(Z, W), X \= Y.
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

---------------------------------------------------------


move(1,S,I,_):-
    write('Move top disk from'),write(S),write(' to '),write(I),nl.
move(N,S,I,D):-
    N>1,
    M is N-1,
    move(M,S,D,I),
    move(1,S,I,_),
    move(M,D,I,S).

---------------------------------------------------------------

water_jug(X,Y):- X>4, Y<3, write("4L water jug over flowed"),nl.
water_jug(X,Y):-X<4, Y>3, write("3L water jug over flowed"),nl.
water_jug(X,Y):- X<4, Y<3, write("both are emty"),nl.

write_jug(X, Y):-
    (X=:= 0, Y=:=0, write('4L:4 & 3L:0, 3L is empty'),X is 4, water_jug(4,0));
    (X=:= 0, Y=:=0, write('4L:0 & 3L:3, 4L is empty'),X is 3, water_jug(0,3));
    (X=:= 2, Y=:=0, write('reach the goal'),X is 4, water_jug(4,0));

    (X=:= 0, Y=:=3, write('4L:3 & 3L:0, 4L is now 3L'),X is 3, water_jug(3,0));
    (X=:= 4, Y=:=0, write('4L:3 & 1L:3, 4L is now 1L'),X is 1, water_jug(1,3));

    (X=:= 3, Y=:=3, write('4L:3 & 3L:0'),water_jug(4,2));
    (X=:= 0, Y=:=2, write('4L:2 & 3L:0'),water_jug(2,0)).



---------------------------------------------------------

on_floor(monkey).

% Monkey is near the door
on(floor,monkey).
on(floor,chair).
in(room,monkey).
in(room,chair).
in(room,banana).
at(ceiling,banana).

strong(monkey).
grasp(monkey).
climb(monkey,chair).

push(monkey,chair):-
    strong(monkey).

under(banana,chair):-
    push(monkey,chair).


canreach(banana,monkey):-
    at(floor,banana);
    at(ceiling,banana),
    under(banana,chair),
    climb(monkey,chair).

canget(banana,monkey):-
    canreach(banana,monkey),grasp(monkey).

-----------------------------------------------------

%four queens chess game.
perm([X|Y], Z):- perm(Y,W), delete_member(X,Z,W).
perm([],[]).

delete_member(X,[X|R], R).
delete_member(X,[F|R], [F|S]):- delete_member(X,R,S).

solve(P):-
    perm([1,2,3,4,5,6,7,8],P),
    combine([1,2,3,4,5,6.7,8],P,S,D),
    all_diff(S),
    all_diff(D).

combine([X1|X] , [Y1|Y], [S1|S], [D1|D]):-
    S1 is X1 + Y1,
    D1 is X1 - Y1,
    combine(X,Y,S,D).

combine([],[],[],[]).

all_diff([X|Y]):- \+member(X,Y), all_diff(Y).
all_diff([X]).

-------------------------------------------------------
chases(Dog, Cat) :- dog(Dog), cat(Cat), larger(Dog), small(Cat).





